import { StatusBar } from 'expo-status-bar';
import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, SafeAreaView, TextInput, Button, FlatList, TouchableOpacity, AsyncStorage } from 'react-native';
import { globalStyles } from './res/style/global';
import Input from './res/components/input';
import Btn from './res/components/btn';
import Card from './res/components/card';
import moment from "moment";
// moment.unix(item.key).fromNow()

export default function App() {

  // list of all entries
  const [entries, setEntries] = useState([]);

  // one entry contains of user input (title, content, mood)... 
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [mood, setMood] = useState("");
  // ...and auto-generated input (date, timestamp/key) with moment.js
  const [date, setDate] = useState("");
  const [key, setKey] = useState(""); // a timestamp is unique enough within a single system

  // executed before 1st render: empty all, refill with data from asyncStore
  useEffect(() => {
    initialReset();
    getDataFromAsyncStore();
  }, [])

  // reset all (user's and auto-gen) data shown in App initially
  const initialReset = () => {
    resetUserInput();
    resetAutoGeneratedInput();
  }

  // resets the InputFields: 
  // (1) inital loading the app and (2) if an entry is saved to asyncStore
  const resetUserInput = () => {
    setTitle("");
    setContent("");
    setMood("");
  }

  const resetAutoGeneratedInput = () => {
    setDate("");
    setKey("");
    setEntries([]);  
  }

  // refill all data in App with AsyncStorageData 
  const getDataFromAsyncStore = async () => {
    try {
      AsyncStorage.getAllKeys((err, allKeys) => {
        AsyncStorage.multiGet(allKeys, (err, items) => {
          items.map((res, i, item) => {
            let key = item[i][0],
              entry = JSON.parse(item[i][1]);
            // to view
            setEntries(currList => {
              return[entry, ...currList]
            });
          });
        });
      });
    } catch (e) {
      alert("GET_DATA_FROM_ASYNC_STORAGE_ERR: "+ e);
    }
  }

  // save single entry to asyncStore (and update view)
  const saveEntryToStore = async () => {
    // for performance reasons in useState (rn), time calculation must stay here...
    let now = moment().unix(),
      key = now.toString(),
      date = moment.unix(now).format("YYYY-MM-DD"),
      entry;
    if (title !== "" && content !== "" && mood !== "") {
      entry = {title, content, mood, date, key};
      try {
        const jsonValue = JSON.stringify(entry)
        await AsyncStorage.setItem('@ASWTK_key_'+key, jsonValue);
        console.log("ADDED entry with key =", key, "to asyncStorage.");
        setEntries((currList) => {
          return [entry, ...currList];
        })
        resetUserInput();
        setDate("");
        setKey("");
      } catch(e) {
        alert("SAVE_ERR: "+e);
      }
    } else {
      alert("you need to fill in title, content and mood.");
    }
  };

  // remove single entry from view (and asyncStore)
  const removeEntry = async (key) => {
    try {
      await AsyncStorage.removeItem('@ASWTK_key_'+key);
      removeEntryFromView(key);
      console.log("REMOVED entry with key =", key);
    } catch(e) {
      alert('REMOVE_ERR:' + e);
    }
  };

  const removeEntryFromView = (key) => {
    let currentList = entries.filter(entry => {
      return entry.key !== key
    })
    setEntries(currentList);
  }

  // get all keys in asyncStore
  const getAllKeysFromAsyncStore = async () => {
    let allKeys = []
    try {
      allKeys = await AsyncStorage.getAllKeys();
      console.log("getAllKeysFromeAsyncStore() => allKeys:", allKeys);
    } catch(e) {
      alter("GET_ALL_KEYS_ERR: "+e);
    }
  };

  // clear all data in asyncStore 
  const clearAsyncStore = async () => {
    try {
      await AsyncStorage.clear();
      setEntries([]);
    } catch(e) {
      alert("CLEAR_STORE_ERR: "+e);
    }
    console.log("storage was CLEARED");
  };

  return (
    <SafeAreaView style={globalStyles.container}>
      <StatusBar style="auto" />
      
      <Text style={globalStyles.titleText}>AsyncStorge with Timestamps as Keys</Text>

      <Input 
        title={title} setTitle={setTitle}
        content={content} setContent={setContent}
        mood={mood} setMood={setMood}
      />

      <Btn text='save' onPress={saveEntryToStore} />
        
      <View style={globalStyles.innerContainer}>
        <Text style={globalStyles.h1}>Output</Text>
        <FlatList 
          style={globalStyles.flatlist}
          data={entries}
          renderItem={({item}) => (
            <TouchableOpacity onPress={() => removeEntry(item.key)}>
              <Card 
                title={item.title} content={item.content} mood={item.mood} 
                date={item.date} id={item.key}
              />
            </TouchableOpacity>
          )}
        />
      </View>

      <View style={globalStyles.bottomRow}>
        <Btn text='get all keys' onPress={getAllKeysFromAsyncStore} />
        <Btn text='remove all data' onPress={clearAsyncStore} />
      </View>
    </SafeAreaView>
  );
}
